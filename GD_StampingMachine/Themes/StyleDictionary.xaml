<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" 
                    xmlns:dxlc="http://schemas.devexpress.com/winfx/2008/xaml/layoutcontrol"
                    xmlns:CalcB="clr-namespace:CalcBinding;assembly=CalcBinding" 
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:GD_UserControls="clr-namespace:GD_StampingMachine.UserControls"
                    xmlns:GD_Popup="clr-namespace:GD_CommonControlLibrary.GD_Popup;assembly=GD_CommonControlLibrary" 
                    xmlns:GD_Method="clr-namespace:GD_StampingMachine.Method" 
                    xmlns:dd="urn:gong-wpf-dragdrop" 
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm" 
                    xmlns:internal="clr-namespace:MaterialDesignThemes.Wpf.Internal;assembly=MaterialDesignThemes.Wpf"
                    xmlns:GD_Singletons="clr-namespace:GD_StampingMachine.Singletons"                    
    xmlns:GD_StampingMachine_UserControls="clr-namespace:GD_StampingMachine.UserControls"
                    >

    <FontFamily x:Key="Inter">.Fonts/#Inter</FontFamily>
    <Style x:Key="Body1TextBlock" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MaterialDesignButtonTextBlock}" >
        <Setter Property="TextBlock.FontFamily" Value="{StaticResource Inter}"/>
        <Setter Property="Padding" Value="0,2,0,0"/>
        <Setter Property="TextBlock.FontSize" Value="16"/>
        <Setter Property="TextBlock.FontWeight" Value="Regular"/>
    </Style>

    <Style x:Key="Body1TextBlockBold" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource Body1TextBlock}" >
        <Setter Property="TextBlock.FontWeight" Value="Bold"/>
    </Style>
    

    <Style TargetType="TextBox" x:Key="GD_TextBox" BasedOn="{StaticResource MaterialDesignTextBox}" >
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontFamily" Value="{StaticResource Inter}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueDarkForegroundBrush}"/>
        <Setter Property="materialDesign:TextFieldAssist.UnderlineBrush"  Value="{DynamicResource PrimaryHueDarkForegroundBrush}"/>
        <Setter Property="Foreground"  Value="{DynamicResource PrimaryHueDarkForegroundBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
    </Style>

    <Style TargetType="TextBox" BasedOn="{StaticResource GD_TextBox}" />



    <Style TargetType="materialDesign:TimePicker" BasedOn="{StaticResource MaterialDesignTimePicker}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueDarkForegroundBrush}"/>
        <Setter Property="materialDesign:TextFieldAssist.UnderlineBrush" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
        <Setter Property="Is24Hours" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="10,0"/>
        <Setter Property="Padding" Value="0,0,0,1"/>
        <Setter Property="materialDesign:HintAssist.Hint" Value="{DynamicResource Text_PSelectTime}"     />
        <Setter Property="FontSize" Value="16"     />
        <Setter Property="materialDesign:TextFieldAssist.TextBoxViewMargin" Value="10,0" />
    </Style>


    <BorderGapMaskConverter x:Key="BorderGapMaskConverter" />
    <Style TargetType="{x:Type GroupBox}" x:Key="ParameterBaseStyleGroupBox">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontFamily" Value="{StaticResource Inter}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="BorderBrush" Value="#666666"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="30" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border
                            Grid.Row="1"
                            Grid.RowSpan="2"
                            Grid.ColumnSpan="3"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="6">
                                    <Binding ElementName="Header" Path="ActualWidth" />
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                                </MultiBinding>
                            </Border.OpacityMask>
                        </Border>
                        <Border
                            Name="Header"
                            Grid.RowSpan="2"  
                            Padding="10,0,0,0">
                            <ContentPresenter 
                                ContentSource="Header"
                                RecognizesAccessKey="true"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ContentPresenter
                            Grid.Row="2" Grid.RowSpan="2"          
                            Grid.ColumnSpan="3"
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            TextBlock.FontSize="{TemplateBinding FontSize}" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style TargetType="{x:Type GroupBox}" x:Key="UnderLineStyleGroupBox">

        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}"/>
        <Setter Property="Padding" Value="5,15,5,5"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueDarkForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="0,2,0,0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontFamily" Value="{StaticResource Inter}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border
                            Grid.Row="1"
                            Grid.ColumnSpan="2"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0">
                        </Border>
                        <Border
                            Name="Header"
                            Padding="10,2,0,2">
                            <ContentPresenter 
                                ContentSource="Header" TextBlock.FontSize="{TemplateBinding FontSize}" TextBlock.Foreground="{TemplateBinding Foreground}"
                                RecognizesAccessKey="true"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>

                        <ContentPresenter  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Grid.Row="1" Grid.ColumnSpan="2"
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                     />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    <Style TargetType="GroupBox" 
           BasedOn="{StaticResource UnderLineStyleGroupBox}">
        <Setter Property="Padding" Value="25,20"/>
    </Style>


    <Style x:Key="FloatingGroupBox" TargetType="{x:Type GroupBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid>
                        <Border CornerRadius="20"
                            Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{Binding Path=Background, ElementName=PART_ColorZone}" />
                        <DockPanel Background="{TemplateBinding Background}">
                            <materialDesign:ColorZone Name="PART_ColorZone"  
                                                      Padding="9" DockPanel.Dock="Top" 
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                      UseLayoutRounding="True" Background="Gray" 
                                                      Foreground="{DynamicResource PrimaryHueDarkForegroundBrush}" >
                                <ContentPresenter ContentSource="Header" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </materialDesign:ColorZone>
                            <ContentPresenter Margin="{TemplateBinding Padding}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </DockPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="materialDesign:ColorZoneAssist.Mode" Value="PrimaryMid" />
        <Setter Property="materialDesign:ElevationAssist.Elevation" Value="Dp5" />
    </Style>

<!--工具列-->
    <Style x:Key="ToolBarButton" TargetType="ButtonBase">
        <Setter Property="Width"
                            Value="40" />
        <Setter Property="Height"
                            Value="30" />
        <Setter Property="Opacity"
                            Value="0.95" />
        <Setter Property="BorderThickness"
                            Value="0" />
        <Setter Property="BorderBrush"
                            Value="Transparent" />
        <Setter Property="Foreground"
                            Value="Black" />
        <Setter Property="Background"
                            Value="Transparent" />
        <Setter Property="Margin"
                            Value="0" />
        <Setter Property="Padding"
                            Value="0" />
        <Setter Property="VerticalContentAlignment"
                            Value="Stretch" />
        <Setter Property="HorizontalContentAlignment"
                            Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <Border Background="{TemplateBinding Background}"        
                            Margin="0"
                            CornerRadius="0"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="LightGray"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="Gray"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <Style x:Key="SiegCustomButton" TargetType="ButtonBase" BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="FontFamily" Value="{StaticResource Inter}"/>
        <Setter Property="FontWeight"  Value="Bold"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="MinWidth"
                            Value="28" />
        <Setter Property="MinHeight"
                            Value="28" />
        <Setter Property="Opacity"
                            Value="0.95" />
        <Setter Property="BorderThickness"
                            Value="0.5" />
        <Setter Property="BorderBrush"
                            Value="{StaticResource DarkHueDarkBrush}" />
        <Setter Property="Cursor"
                            Value="Hand" />
        <Setter Property="Margin"
                            Value="0" />
        <Setter Property="Padding"
                            Value="5,0" />
        <Setter Property="Foreground"
                            Value="Black" />
        <Setter Property="Background"
                            Value="WhiteSmoke" />
        <Setter Property="VerticalContentAlignment"
                            Value="Center" />
        <Setter Property="HorizontalContentAlignment"
                            Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Grid>
                        <Border 
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                            Background="{TemplateBinding Background}"        
                            CornerRadius="5"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter
                            TextBlock.FontFamily="{TemplateBinding FontFamily}"
                            TextBlock.FontWeight="{TemplateBinding FontWeight}"
                            TextBlock.FontSize="{TemplateBinding FontSize}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ProgressBar 
                            
                            Name="ProgressBar" Height="{TemplateBinding Height}" HorizontalAlignment="Left" VerticalAlignment="Center" 
                            Style="{DynamicResource MaterialDesignLinearProgressBar}" 
                            Width="{Binding RelativeSource={RelativeSource FindAncestor , AncestorType={x:Type ButtonBase}}, Path=ActualWidth}" 
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IndicatorBackground)}"
                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IndicatorBackground)}" 
                            Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IndicatorForeground)}"
                            IsIndeterminate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IsIndeterminate)}" 
                            Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Maximum)}" 
                            Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Minimum)}" 
                            Opacity="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Opacity)}" 
                            Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IsIndicatorVisible), Converter={StaticResource BooleanToVisibilityConverter}}" 
                            Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Value)}">
                            <ProgressBar.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </ProgressBar.Clip>
                        </ProgressBar>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="LightSkyBlue"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="Orange"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
                
                
                
            </Setter.Value>
        </Setter>
    </Style>




    <Style x:Key="SiegCustomButton_Dark" TargetType="ButtonBase" BasedOn="{StaticResource SiegCustomButton}">
        <Setter Property="Foreground"
                            Value="WhiteSmoke" />
        <Setter Property="Background"
                            Value="DarkCyan" />
    </Style>

    <Style x:Key="SiegCustomButtonSkyBlue" TargetType="ButtonBase" BasedOn="{StaticResource SiegCustomButton}">
        <Setter Property="Foreground"
                            Value="WhiteSmoke" />
        <Setter Property="Background"
                            Value="#40cfff" />
    </Style>


    <Style x:Key="SiegCustomButton_Primary" TargetType="ButtonBase" BasedOn="{StaticResource SiegCustomButton}">
        <Setter Property="BorderThickness" Value="1.5"/>
        <Setter Property="BorderBrush"     Value="{DynamicResource PrimaryHueDarkForegroundBrush}"/>
        <Setter Property="Foreground"
                            Value="{DynamicResource  PrimaryHueDarkForegroundBrush}" />
        <Setter Property="Background"
                            Value="{DynamicResource PrimaryHueMidBrush}" />
        <Style.Triggers>
            
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="LightSkyBlue"/>
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="Orange"/>
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>

        </Style.Triggers>
    </Style>

    <Style x:Key="SiegCustomButton_Transparent" TargetType="ButtonBase" BasedOn="{StaticResource SiegCustomButton_Primary}">
        <Setter Property="Background" Value="Transparent"/>
    </Style>










    <Style x:Key="SiegCustomRepeatButton" TargetType="RepeatButton" BasedOn="{StaticResource MaterialDesignFlatButton}">
    
        
        <Setter Property="Opacity"
                            Value="0.9" />
        <Setter Property="BorderThickness"
                            Value="2" />
        <Setter Property="BorderBrush" 
                Value="White"/>
        <Setter Property="Cursor"
                            Value="Hand" />
        <Setter Property="Margin"
                            Value="0" />
        <Setter Property="Padding"
                            Value="0" />
        <Setter Property="Background"
                            Value="Transparent" />
        <Setter Property="Foreground" 
                Value="White"/>
        <Setter Property="Width" Value="20"/>
        <Setter Property="FontFamily" Value="{StaticResource Inter}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Background="{TemplateBinding Background}"     
                            Height="{TemplateBinding Width}"
                            Width="{TemplateBinding Width}"
                            Margin="0"
                            CornerRadius="2"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter  HorizontalAlignment="Center" VerticalAlignment="Center">

                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="Orange"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="OrangeRed"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <Style x:Key="GD_RepeatButton" TargetType="ButtonBase" BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="FontFamily" Value="{StaticResource Inter}"/>
        <Setter Property="FontWeight"  Value="Regular"/>
        <Setter Property="FontSize" Value="16"/>

        <Setter Property="Width"
                            Value="auto" />
        <Setter Property="Height"
                            Value="auto" />
        <Setter Property="HorizontalAlignment"
                            Value="Center" />
        <Setter Property="VerticalAlignment"
                            Value="Center" />


        <Setter Property="Opacity"
                            Value="0.9" />
        <Setter Property="BorderThickness"
                            Value="0" />
        <Setter Property="BorderBrush" 
                Value="White"/>
        <Setter Property="Cursor"
                            Value="Hand" />
        <Setter Property="Margin"
                            Value="0" />
        <Setter Property="Padding"
                            Value="0" />
        <Setter Property="Background"
                            Value="White" />
        <Setter Property="Foreground" 
                Value="Black"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Border Background="{TemplateBinding Background}"     
                            Height="{TemplateBinding Width}"
                            Width="{TemplateBinding Width}"
                            Margin="0"
                            CornerRadius="2"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter  HorizontalAlignment="Center" VerticalAlignment="Center">

                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="Orange"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="OrangeRed"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="SiegToggleButton_UnderLine" TargetType="ToggleButton" BasedOn="{StaticResource SiegCustomButton}">
        <Setter Property="Opacity"
                            Value="0.9" />
        <Setter Property="BorderThickness"
                            Value="0" />
        <Setter Property="Cursor"
                            Value="Hand" />
        <Setter Property="Margin"
                            Value="2" />
        <Setter Property="Padding"
                            Value="5" />
        <Setter Property="Background"
                            Value="Transparent" />
        <Setter Property="Foreground"
                            Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>

                        <Border  Background="{TemplateBinding Background}"    
                                 BorderThickness="0,0,0,2" BorderBrush="{TemplateBinding Foreground}" Margin="0,0" Name="TheBottomLine"/>
                        <Border   
                            Margin="10,0"
                            CornerRadius="5"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center">

                            </ContentPresenter>
                        </Border>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="LightSkyBlue"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="Orange"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.3"/>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="False" >
                            <Setter Property="Visibility" Value="Collapsed"  TargetName="TheBottomLine"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    

    <Style TargetType="{x:Type ToggleButton}" x:Key="GD_ToggleButton" BasedOn="{StaticResource SiegCustomButton}">
        <Setter Property="Background" Value="{StaticResource ToggleButtonBackgroundLightGrayBrush}"/>
        <Setter Property="materialDesign:ButtonAssist.CornerRadius" Value="2"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource solidclr_SilverGray}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Background" Value="{StaticResource ToggleButtonBackgroundSkyBlueBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" x:Key="GD_ToggleButton_White" BasedOn="{StaticResource GD_ToggleButton}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="materialDesign:ButtonAssist.CornerRadius" Value="2"/>

        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="SkyBlue"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="Orange"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="Orange"/>
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type ToggleButton}" x:Key="GD_ToggleButton_Gray" BasedOn="{StaticResource SiegCustomButton_Primary}">
        <Setter Property="materialDesign:ButtonAssist.CornerRadius" Value="2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="SkyBlue"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="Orange"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="Orange"/>
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>

    </Style>


    <Style TargetType="{x:Type ToggleButton}" x:Key="GD_MainToggleButton" BasedOn="{StaticResource SiegCustomButton}">
        <Setter Property="Background" Value="{StaticResource ToggleButtonBackgroundLightGrayBrush}"/>
        <Setter Property="materialDesign:ButtonAssist.CornerRadius" Value="2"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Cursor"  Value="Hand"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="Margin" Value="5,2"/>
        <Setter Property="Padding" Value="2"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource solidclr_SilverGray}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Background" Value="{StaticResource ToggleButtonBackgroundSkyBlueBrush}"/>
            </Trigger>
            
            
            
            
        </Style.Triggers>
    </Style>

    <Style x:Key="Sieg_CylinderToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource SiegCustomButton}">
        <Setter Property="Background" Value="{StaticResource ToggleButtonBackgroundLightGrayBrush}"/>
        <Setter Property="materialDesign:ButtonAssist.CornerRadius" Value="2"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="MinWidth"  Value="0"/>
        <Setter Property="MinHeight"  Value="0"/>
        <Setter Property="Cursor"  Value="Hand"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="Margin" Value="5,2"/>
        <Setter Property="Padding" Value="2"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Background" Value="{StaticResource ToggleButtonBackgroundSkyBlueBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Orange"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="OrangeRed"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="DeepSkyBlue"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Sieg_CylinderRepeatButton" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource SiegCustomButton}">
        <Setter Property="Background" Value="{StaticResource ToggleButtonBackgroundLightGrayBrush}"/>
        <Setter Property="materialDesign:ButtonAssist.CornerRadius" Value="2"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="MinWidth"  Value="0"/>
        <Setter Property="MinHeight"  Value="0"/>
        <Setter Property="Cursor"  Value="Hand"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="Margin" Value="5,2"/>
        <Setter Property="Padding" Value="2"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Orange"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="OrangeRed"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="DeepSkyBlue"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    
    










    <Style x:Key="SliderButtonStyle"
       TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels"
          Value="true" />
        <Setter Property="OverridesDefaultStyle"
          Value="true" />
        <Setter Property="IsTabStop"
          Value="false" />
        <Setter Property="Focusable"
          Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="{CalcB:Binding RelativeSource={RelativeSource Self}, Path=ActualHeight /2}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SliderThumbStyle"
       TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels"
          Value="true" />
        <Setter Property="OverridesDefaultStyle"
          Value="true" />
        <Setter Property="Height"
          Value="20" />
        <Setter Property="Width"
          Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Ellipse x:Name="Ellipse"
                 StrokeThickness="1">
                        <Ellipse.Stroke>
                            <LinearGradientBrush StartPoint="0,0"
                                 EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="{DynamicResource BorderLightColor}"
                                Offset="0.0" />
                                        <GradientStop Color="{DynamicResource BorderDarkColor}"
                                Offset="1.0" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Ellipse.Stroke>
                        <Ellipse.Fill>
                            <LinearGradientBrush EndPoint="0.5,1"
                                 StartPoint="0.5,0">
                                <GradientStop Color="{DynamicResource ControlMediumColor}"
                            Offset="1" />
                                <GradientStop Color="{DynamicResource ControlLightColor}" />
                            </LinearGradientBrush>
                        </Ellipse.Fill>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).
                    (GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                                Storyboard.TargetName="Ellipse">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="#FF3843C4" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).
                    (GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                                Storyboard.TargetName="Ellipse">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="#FF211AA9" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).
                    (GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                                Storyboard.TargetName="Ellipse">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="#FFC5CBF9" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Ellipse>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Template when the orientation of the Slider is Horizontal.-->
    <ControlTemplate x:Key="HorizontalSlider"  
                 TargetType="{x:Type Slider}">
        <Border 
            Background="{TemplateBinding Background}" CornerRadius="{CalcB:Binding RelativeSource={RelativeSource Self}, Path=ActualHeight/2}" Padding="0">
        <Grid  Margin="2">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto"
                     MinHeight="{TemplateBinding MinHeight}" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            
            <TickBar x:Name="TopTick"
             SnapsToDevicePixels="True"
             Placement="Top"
             Height="4"
             Visibility="Collapsed">
                <TickBar.Fill>
                    <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                </TickBar.Fill>
            </TickBar>
            <Border x:Name="TrackBackground"
            Margin="0"
            CornerRadius="2"
            Height="4"
            Grid.Row="1"
            BorderThickness="1">
                <Border.BorderBrush>
                    <LinearGradientBrush StartPoint="0,0"
                             EndPoint="0,1">
                        <LinearGradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="{DynamicResource BorderLightColor}"
                            Offset="0.0" />
                                <GradientStop Color="{DynamicResource BorderDarkColor}"
                            Offset="1.0" />
                            </GradientStopCollection>
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Border.BorderBrush>
                <Border.Background>
                    <LinearGradientBrush StartPoint="0,0"
                             EndPoint="0,1">
                        <LinearGradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="{DynamicResource ControlLightColor}"
                            Offset="0.0" />
                                <GradientStop Color="{DynamicResource SliderTrackDarkColor}"
                            Offset="1.0" />
                            </GradientStopCollection>
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Border.Background>
            </Border>
                <Track Grid.Row="1" 
           x:Name="PART_Track">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource SliderButtonStyle}"    Background="{TemplateBinding Foreground}"
                      Command="Slider.DecreaseLarge" >
                        </RepeatButton>
                        
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource SliderButtonStyle}" Background="Transparent"
                      Command="Slider.IncreaseLarge" />
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb  Margin="-20,0"  />
                    </Track.Thumb>
                </Track>

                <TickBar x:Name="BottomTick"
             SnapsToDevicePixels="True"
             Grid.Row="2"
             Fill="{TemplateBinding Foreground}"
             Placement="Bottom"
             Height="4"
             Visibility="Collapsed" />
        </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement"
             Value="TopLeft">
                <Setter TargetName="TopTick"
              Property="Visibility"
              Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement"
             Value="BottomRight">
                <Setter TargetName="BottomTick"
              Property="Visibility"
              Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement"
             Value="Both">
                <Setter TargetName="TopTick"
              Property="Visibility"
              Value="Visible" />
                <Setter TargetName="BottomTick"
              Property="Visibility"
              Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Template when the orientation of the Slider is Vertical.-->
    <ControlTemplate x:Key="VerticalSlider"
                 TargetType="{x:Type Slider}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto"
                        MinWidth="{TemplateBinding MinWidth}" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <TickBar x:Name="TopTick"
             SnapsToDevicePixels="True"
             Placement="Left"
             Width="4"
             Visibility="Collapsed">
                <TickBar.Fill>
                    <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                </TickBar.Fill>
            </TickBar>

            <Border x:Name="TrackBackground"
            Margin="0"
            CornerRadius="2"
            Width="4"
            Grid.Column="1"
            BorderThickness="1">
                <Border.BorderBrush>
                    <LinearGradientBrush StartPoint="0,0"
                             EndPoint="1,0">
                        <LinearGradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="{DynamicResource BorderLightColor}"
                            Offset="0.0" />
                                <GradientStop Color="{DynamicResource BorderDarkColor}"
                            Offset="1.0" />
                            </GradientStopCollection>
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>

                </Border.BorderBrush>
                <Border.Background>
                    <LinearGradientBrush EndPoint="1,0"
                             StartPoint="0.25,0">
                        <GradientStop Color="{DynamicResource ControlLightColor}"
                        Offset="0" />
                        <GradientStop Color="{DynamicResource SliderTrackDarkColor}"
                        Offset="1" />
                    </LinearGradientBrush>
                </Border.Background>
            </Border>
            <Track Grid.Column="1"
           x:Name="PART_Track">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource SliderButtonStyle}"
                      Command="Slider.DecreaseLarge" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource SliderThumbStyle}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource SliderButtonStyle}"
                      Command="Slider.IncreaseLarge" />
                </Track.IncreaseRepeatButton>
            </Track>
            <TickBar x:Name="BottomTick"
             SnapsToDevicePixels="True"
             Grid.Column="2"
             Fill="{TemplateBinding Foreground}"
             Placement="Right"
             Width="4"
             Visibility="Collapsed" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement"
             Value="TopLeft">
                <Setter TargetName="TopTick"
              Property="Visibility"
              Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement"
             Value="BottomRight">
                <Setter TargetName="BottomTick"
              Property="Visibility"
              Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement"
             Value="Both">
                <Setter TargetName="TopTick"
              Property="Visibility"
              Value="Visible" />
                <Setter TargetName="BottomTick"
              Property="Visibility"
              Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Slider}" BasedOn="{StaticResource MaterialDesignDiscreteSlider}" x:Key="CustomSlider">
        <Setter Property="SnapsToDevicePixels"
          Value="true" />
        <Setter Property="OverridesDefaultStyle"
          Value="true" />
        <Setter Property="Opacity" Value="1.0"/>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.3"/>
            </Trigger>

            <Trigger Property="Orientation"
             Value="Horizontal">
                <Setter Property="MinWidth"
              Value="100" />
                <Setter Property="MinHeight"
              Value="10" />
                <Setter Property="Template"
              Value="{StaticResource HorizontalSlider}" />
            </Trigger>

            <Trigger Property="Orientation"
             Value="Vertical">
                <Setter Property="MinWidth"
              Value="10" />
                <Setter Property="MinHeight"
              Value="104" />
                <Setter Property="Template"
              Value="{StaticResource VerticalSlider}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="SquareRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="13" Height="13">
                                <Rectangle
                                x:Name="Border"
                                StrokeThickness="1"
                                Stroke="Black"
                                Fill="White"
                                />
                                <Rectangle
                                x:Name="CheckMark"
                                Fill="Black"
                                Visibility="Collapsed"
                                Margin="2"
                                />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Pressed" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames
                                        Storyboard.TargetName="Border"
                                        Storyboard.TargetProperty="Stroke.Color"
                                        >
                                            <DiscreteColorKeyFrame KeyTime="0" Value="LightGray" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames
                                        Storyboard.TargetName="CheckMark"
                                        Storyboard.TargetProperty="Fill.Color"
                                        >
                                            <DiscreteColorKeyFrame KeyTime="0" Value="LightGray" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked" >
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames
                                        Storyboard.TargetName="CheckMark"
                                        Storyboard.TargetProperty="(UIElement.Visibility)"
                                        >
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter
                        Margin="4,0,0,0"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Left"
                        RecognizesAccessKey="True"
                        />
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="GD_PopUpBox" TargetType="{x:Type materialDesign:PopupBox}" >
            <Setter Property="PopupUniformCornerRadius" Value="5"/>
            <Setter Property="PlacementMode" Value="BottomAndAlignCentres"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Template">
                <Setter.Value>
                <ControlTemplate TargetType="{x:Type materialDesign:PopupBox}">
                    <Grid>
                        <ToggleButton x:Name="PART_Toggle"  Style="{StaticResource GD_ToggleButton_White}"
                                      MinHeight="5"
                                      Padding="{TemplateBinding Padding}"
                                      Margin="{TemplateBinding Margin}"
                                                                              VerticalAlignment="Center"
                                                                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                                              Content="{TemplateBinding ToggleContent}"
                                                                              ContentTemplate="{TemplateBinding ToggleContentTemplate}"
                                                                              Cursor="Hand"
                                                                              IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                                                                              IsTabStop="{TemplateBinding IsTabStop}"
                                      Foreground="{TemplateBinding Foreground}"
                                          BorderBrush="{TemplateBinding BorderBrush}"
                                          BorderThickness="{TemplateBinding BorderThickness}"
                                                                              TabIndex="{TemplateBinding TabIndex}" />
                        <materialDesign:PopupEx                                                     
                            AllowsTransparency="True"                  
                            CustomPopupPlacementCallback="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupPlacementMethod}"                                 
                            IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                            Placement="Custom"
                            PlacementTarget="{Binding ElementName=PART_Toggle}"
                            PopupAnimation="Slide">
                            <materialDesign:Card 
                                                                        Padding="{TemplateBinding Padding}"
                                                                        Content="{TemplateBinding PopupContent}"
                                                                        ContentTemplate="{TemplateBinding PopupContentTemplate}"
                                                                        Foreground="{DynamicResource MaterialDesignBody}"
                                                                        RenderOptions.ClearTypeHint="Enabled"
                                                                        UniformCornerRadius="{TemplateBinding PopupUniformCornerRadius}">
                            </materialDesign:Card>
                            </materialDesign:PopupEx>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" Value="0.38" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="TextElement.FontWeight" Value="Regular" />
            <Setter Property="materialDesign:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}" />
        </Style>



    <Style TargetType="ToggleButton" BasedOn="{StaticResource GD_ToggleButton}">
        <Setter Property="Width" Value="45"/>
        <Setter Property="Height" Value="45"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Padding" Value="0"/>
    </Style>





    <Style TargetType="GD_UserControls:FunctionToggleUserControl" x:Key="FunctionToggleUserControlKey">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="{StaticResource Inter}"/>

        <Setter Property="materialDesign:ShadowAssist.ShadowEdges" Value="None"/>

        <Setter Property="ContentPadding" Value="0"/>
        <Setter Property="Padding" Value="2,2"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="TextMargin" Value="2,0,3,2"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="ImageWidth" Value="40"/>
        <Setter Property="ImageHeight" Value="40"/>
        <Setter Property="IsCheckedBackground" Value="#4b4b4b"/>
        <Setter Property="MouseIsOverBackground" Value="Gray"/>
        <Setter Property="IsCheckedBorderThickness" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="#FF40C4FF"/>
                <Setter Property="ImageSource" Value="{StaticResource Feeding_Component_BlueDrawingImage}"/>
            </Trigger>
        </Style.Triggers>

    </Style>
    
    <Style x:Key="FunctionToggleUserControl_Bottom"
                                    TargetType="GD_UserControls:FunctionToggleUserControl" 
                                       BasedOn="{StaticResource FunctionToggleUserControlKey}">

        <Setter Property="Margin" Value="2,2"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource DarkHueDarkForegroundBrush}"/>
        <Setter Property="IsCheckedBorderThickness" Value="2.0"/>
    </Style>

    <Style x:Key="FunctionToggleUserControl_LeftDrawer"
           TargetType="GD_UserControls:FunctionToggleUserControl" BasedOn="{StaticResource FunctionToggleUserControlKey}">
        <Setter Property="Margin" Value="10,5"/>
        <Setter Property="ContentPadding" Value="5"/>
        <Setter Property="Padding" Value="0,0"/>
        <Setter Property="TextMargin" Value="5,0,10,0"/>
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="IsDragable" Value="True"/>
        <Setter Property="IsDropable" Value="False"/>
        <Setter Property="MouseIsOverBackground" Value="#99cff9 "/>
        <Setter Property="IsCheckedBackground" Value="Transparent"/>

        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static GD_Singletons:StampingMachineSingleton.Instance},Path=IsBrightMode}" Value="False">
                <Setter Property="MouseIsOverBackground" Value="#125386"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="GD_UserControls:FunctionToggleUserControl" x:Key="FunctionToggleUserControl_ParameterSetting" BasedOn="{StaticResource FunctionToggleUserControlKey}">

        <Setter Property="MouseIsOverBackground" Value="#99cff9"/>
        <Setter Property="IsCheckedBackground" Value="Transparent"/>
        <Setter Property="ContentPadding" Value="4"/>
        <Setter Property="Margin" Value="4,2"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static GD_Singletons:StampingMachineSingleton.Instance},Path=IsBrightMode}" Value="False">
                <Setter Property="MouseIsOverBackground" Value="#125386"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="GD_UserControls:FunctionToggleUserControl" BasedOn="{StaticResource FunctionToggleUserControlKey}"/>
    
    <Style TargetType="Button" BasedOn="{StaticResource SiegCustomButton_Primary}"/>
    
    <Style TargetType="GD_Popup:DraggablePopup" BasedOn="{StaticResource MaterialDesignDialogHostPopup}">
        <Setter Property="Placement" Value="MousePoint"/>
        <Setter Property="PopupAnimation"  Value="Fade"/>
    </Style>
    <Style TargetType="GD_UserControls:TriggerSliderUserControl">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryAccentBrush}"/>
        <Setter Property="RepeatButtonForeground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}"/>
    </Style>

    <Style TargetType="materialDesign:PackIcon">
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Width}"/>
    </Style>


    <!--可拖曳式工具列-->
    <Style TargetType="ItemsControl" x:Key="DragableItemsControl">
        <Setter Property="dd:DragDrop.DropTargetAdornerBrush" Value="Transparent"/>
        <Setter Property="dd:DragDrop.UseDefaultEffectDataTemplate" Value="true"/>
        <Setter Property="dd:DragDrop.UseDefaultDragAdorner" Value="true"/>
        <Setter Property="dd:DragDrop.DefaultDragAdornerOpacity" Value="0.9"/>
        <Setter Property="dd:DragDrop.IsDragSource" Value="True"/>
        <Setter Property="dd:DragDrop.IsDropTarget" Value="True"/>
    </Style>

    <DataTemplate x:Key="DragAdornerTemplateBright">
        <Border DataContext="{Binding}" 
                                BorderThickness="1.5"
                                BorderBrush="{DynamicResource PrimaryHueMidBrush}" 
                                Background="{DynamicResource PrimaryHueDarkBrush}" CornerRadius="5">
            <GD_UserControls:FunctionToggleUserControl
                                ControlTitleText ="{Binding ControlTitleText}"      
                                ImageSource ="{Binding ImageSource}"   
                                Foreground="{DynamicResource PrimaryHueDarkForegroundBrush}"
                                Orientation="{Binding Orientation}"
                                PackIconKind="{Binding PackIconKind}"
                                ImageWidth="{Binding ImageWidth}"
                                ImageHeight="{Binding ImageHeight}"/>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="DragAdornerTemplateDark">
        <Border DataContext="{Binding}" 
                                BorderThickness="1.5"
                                BorderBrush="{DynamicResource DarkHueMidBrush}" 
                                Background="{DynamicResource DarkHueDarkBrush}" CornerRadius="5">
            <GD_UserControls:FunctionToggleUserControl
                                ControlTitleText ="{Binding ControlTitleText}"      
                                ImageSource ="{Binding ImageSource}"   
                                Foreground="{DynamicResource DarkHueDarkForegroundBrush}"
                                Orientation="{Binding Orientation}"
                                PackIconKind="{Binding PackIconKind}"
                                ImageWidth="{Binding ImageWidth}"
                                ImageHeight="{Binding ImageHeight}"/>
        </Border>
    </DataTemplate>



    <Style TargetType="ProgressBar" BasedOn="{StaticResource MaterialDesignLinearProgressBar}" x:Key="GD_ProgressBar">
        
    </Style>
    
    <Style TargetType="ProgressBar" BasedOn="{StaticResource GD_ProgressBar}" />



    <Style TargetType="{x:Type CheckBox}" x:Key="GreenSwitch">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Opacity" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnChecking">
                            <DoubleAnimationUsingKeyFrames
                                BeginTime="00:00:00"
                                Storyboard.TargetName="slider"
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:0.15" Value="29" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="OnUnchecking">
                            <DoubleAnimationUsingKeyFrames
                                BeginTime="00:00:00"
                                Storyboard.TargetName="slider"
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:0.15" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Viewbox x:Name="dockPanel">
                        <Grid>
                            <Border
                                x:Name="BackgroundBorder"
                                Width="65"
                                Height="34"
                                BorderBrush="#FF939393"
                                BorderThickness="1"
                                CornerRadius="16">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset="0" Color="#FFBCBCBC" />
                                        <GradientStop Offset="0.33" Color="#FFC3C3C3" />
                                        <GradientStop Offset="0.67" Color="#FFDADADA" />
                                        <GradientStop Offset="1" Color="#FFECECEC" />
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="2*" />
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="2*" />
                                    </Grid.ColumnDefinitions>
                                    <Line
                                        x:Name="On"
                                        Grid.Column="0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Stroke="White"
                                        StrokeThickness="1.5"
                                        X1="0"
                                        X2="0"
                                        Y1="0"
                                        Y2="16" />
                                    <Ellipse
                                        x:Name="Off"
                                        Grid.Column="2"
                                        Width="16"
                                        Height="16"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Stroke="White"
                                        StrokeThickness="1.5" />
                                </Grid>
                            </Border>
                            <Border
                                x:Name="slider"
                                Width="30"
                                Height="30"
                                Margin="3,0,0,0"
                                HorizontalAlignment="Left"
                                BorderBrush="#FF939393"
                                BorderThickness="1"
                                CornerRadius="15"
                                RenderTransformOrigin="0.5,0.5">
                                <Border.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="0" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Border.RenderTransform>
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset="0" Color="#FFF4F4F4" />
                                        <GradientStop Offset="0.1" Color="#FFF9F9F9" />
                                        <GradientStop Offset="1" Color="#FFFFFFFF" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </Grid>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="OnUnchecking_BeginStoryboard" Storyboard="{StaticResource OnUnchecking}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="OnChecking_BeginStoryboard" Storyboard="{StaticResource OnChecking}" />
                            </Trigger.EnterActions>
                            <Setter TargetName="Off" Property="Stroke" Value="White" />
                            <!--  Change Orange or Blue color here  -->
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="#90dd12" />
                            <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="#90dd12" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <!--  ToDo: Add Style for Isenabled == False  -->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.3"/>
            </Trigger>
        </Style.Triggers>
        
        
    </Style>



    <Style TargetType="{x:Type CheckBox}" x:Key="SkyBlueSwitch">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Opacity" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnChecking">
                            <DoubleAnimationUsingKeyFrames
                                BeginTime="00:00:00"
                                Storyboard.TargetName="slider"
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:0.15" Value="29" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="OnUnchecking">
                            <DoubleAnimationUsingKeyFrames
                                BeginTime="00:00:00"
                                Storyboard.TargetName="slider"
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:0.15" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Viewbox x:Name="dockPanel">
                        <Grid>
                            <Border
                                x:Name="BackgroundBorder"
                                Width="65"
                                Height="34"
                                BorderBrush="#FF939393"
                                BorderThickness="1"
                                CornerRadius="16">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset="0" Color="#FFBCBCBC" />
                                        <GradientStop Offset="0.33" Color="#FFC3C3C3" />
                                        <GradientStop Offset="0.67" Color="#FFDADADA" />
                                        <GradientStop Offset="1" Color="#FFECECEC" />
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="2*" />
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="2*" />
                                    </Grid.ColumnDefinitions>
                                    <Line
                                        x:Name="On"
                                        Grid.Column="0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Stroke="White"
                                        StrokeThickness="1.5"
                                        X1="0"
                                        X2="0"
                                        Y1="0"
                                        Y2="16" />
                                    <Ellipse
                                        x:Name="Off"
                                        Grid.Column="2"
                                        Width="16"
                                        Height="16"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Stroke="White"
                                        StrokeThickness="1.5" />
                                </Grid>
                            </Border>
                            <Border
                                x:Name="slider"
                                Width="30"
                                Height="30"
                                Margin="3,0,0,0"
                                HorizontalAlignment="Left"
                                BorderBrush="#FF939393"
                                BorderThickness="1"
                                CornerRadius="15"
                                RenderTransformOrigin="0.5,0.5">
                                <Border.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="0" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Border.RenderTransform>
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset="0" Color="#FFF4F4F4" />
                                        <GradientStop Offset="0.1" Color="#FFF9F9F9" />
                                        <GradientStop Offset="1" Color="#FFFFFFFF" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </Grid>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="OnUnchecking_BeginStoryboard" Storyboard="{StaticResource OnUnchecking}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="OnChecking_BeginStoryboard" Storyboard="{StaticResource OnChecking}" />
                            </Trigger.EnterActions>
                            <Setter TargetName="Off" Property="Stroke" Value="White" />
                            <!--  Change Orange or Blue color here  -->
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="SkyBlue" />
                            <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="SkyBlue" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <!--  ToDo: Add Style for Isenabled == False  -->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.3"/>
            </Trigger>
        </Style.Triggers>


    </Style>

    <Style TargetType="GD_StampingMachine_UserControls:GradientEllipse">
        <Setter Property="Fill" Value="{StaticResource NoneIsFinishSolidColorBrush}"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding DataMatrixIsFinish}" Value="true" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Fill" Value="{DynamicResource DataMatrixIsFinish_BorderBrush_Dark_SolidColorBrush}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding EngravingIsFinish}" Value="true" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Fill" Value="{DynamicResource ShearingIsFinish_BorderBrush_Dark_SolidColorBrush}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ShearingIsFinish}" Value="true" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Fill" Value="{DynamicResource EngravingIsFinish_BorderBrush_Dark_SolidColorBrush}"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Row.WorkIndex }" Value="-1">
                <Setter Property="Fill" Value="{DynamicResource NoneIsFinishSolidColorBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Row.IsSended }" Value="true">
                <Setter Property="Fill" Value="{DynamicResource DataMatrixIsSendedSolidColorBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Row.DataMatrixIsFinish }" Value="true">
                <Setter Property="Fill" Value="{DynamicResource DataMatrixIsFinishSolidColorBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Row.EngravingIsFinish}" Value="true">
                <Setter Property="Fill" Value="{DynamicResource ShearingIsFinishSolidColorBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Row.ShearingIsFinish}" Value="true">
                <Setter Property="Fill" Value="{DynamicResource EngravingIsFinishSolidColorBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Row.IsFinish}" Value="true">
                <Setter Property="Fill" Value="ForestGreen"/>
            </DataTrigger>



        </Style.Triggers>
    </Style>
    


</ResourceDictionary>